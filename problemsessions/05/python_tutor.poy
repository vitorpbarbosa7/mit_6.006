def solve(config):
    parent, frontier = {config: None}, [config]
    while len(frontier) != 0:
        frontier = explore_frontier(frontier, parent)
    if SOLVED in parent:
        ph = ph_to_config(SOLVED, parent)
        return mvs_from_ph(ph)
    return None
SOLVED = '000011223344112233445555'
def config_str(config):
    return """
             %s%s
             %s%s
           %s%s%s%s%s%s%s%s
           %s%s%s%s%s%s%s%s
             %s%s
             %s%s
           """ % tuple(config)
def shift(A, d, ps):
    values = [A[p] for p in ps]
    k = len(ps)
    for i in range(k):
        A[ps[i]] = values[(i - d) % k]
def rotate(config, f, sgn):
    assert f in (0, 1, 2)
    assert sgn in (-1, 1)
    if f is None:    return config
    new_config = list(config)
    if f == 0:
        shift(new_config, 1*sgn, [0,1,3,2])
        shift(new_config, 2*sgn, [11,10,9,8,7,6,5,4])
    elif f == 1:
        shift(new_config, 1*sgn, [4,5,13,12])
        shift(new_config, 2*sgn, [0,2,6,14,20,22,19,11])
    elif f == 2:
        shift(new_config, 1*sgn, [6,7,15,14])
        shift(new_config, 2*sgn, [2,3,8,16,21,20,13,5])
    return ''.join(new_config)
def neighbors(config):
    ns = []
    for f in (0, 1, 2):
        for sgn in (-1, 1):
            ns.append(rotate(config, f, sgn))
    return ns
def explore_frontier(frontier, parent): 
    new_frontier = []
    for f in frontier:
        for config in neighbors(f):
            if config not in parent:
                parent[config] = f
                new_frontier.append(config)
    return new_frontier
def ph_to_config(config, parent):
    ph = [config]
    while ph[-1] is not None:
        ph.append(parent[ph[-1]])
    ph.pop()
    ph.reverse()
    return ph
def mvs_from_ph(ph):
    mvs = []
    for i in range(1, len(ph)):
        mv = None
        for f in (0, 1, 2):
            for sgn in (-1, 1):
                if rotate(ph[i - 1], f, sgn) == ph[i]:
                    mv = (f, sgn)
                    mvs.append(mv)
        if mv is None:
            return None
    return mvs
def ph_from_mvs(config, mvs):
    ph = [config]
    for mv in mvs:
        f, sgn = mv
        config = rotate(config, f, sgn)
        ph.append(config)
    return ph
def scramble(config, n):
    from random import randint
    for _ in range(n):
        ns = neighbors(config)
        i = randint(0, 2)
        config = ns[i]
    return config
def check(config, mvs):
    ph = ph_from_mvs(config, mvs)
    for i in range(1, len(ph)):
        f, sgn = mvs[i - 1]
        dir = 'clockwise'
        if sgn == -1:
            dir = 'counterclockwise'
    return ph[-1] == SOLVED
def test(config):
    mvs = solve(config)
    if mvs is None:   
        return
config = '431034541020510233422515'
test(config)
